#ifndef LIGHTSDIALOG_H_
#define LIGHTSDIALOG_H_

#include <array>
#include <QDialog>
#include <ngl/Vec3.h>

//----------------------------------------------------------------------------------------------------------------------
/// @file LightsDialog.h
/// @brief This class contains the user interface required to manage lights in the scene
/// @author Neerav Nagda
/// @version 0.1
/// @date 02/04/17
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// @struct Light
/// @brief Contains light information used by the shaders
//----------------------------------------------------------------------------------------------------------------------
typedef struct Light
{
		bool m_isActive = false;///< Check if the light is active
		ngl::Vec3 m_position = ngl::Vec3::zero();///< Position of the light
		ngl::Vec3 m_ambient = ngl::Vec3(0.5f,0.5f,0.5f);///< Ambient colour
		ngl::Vec3 m_diffuse = ngl::Vec3(1.0f,1.0f,1.0f);///< Diffuse colour
		ngl::Vec3 m_specular = ngl::Vec3(1.0f,1.0f,1.0f);///< Specular colour
} Light;

namespace Ui {
class LightsDialog;
}

//----------------------------------------------------------------------------------------------------------------------
/// @class LightsDialog
/// @brief This class manages the lights in the scene
//----------------------------------------------------------------------------------------------------------------------
class LightsDialog : public QDialog
{
		Q_OBJECT

	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Constructor
		/// @param parent The parent object
		//----------------------------------------------------------------------------------------------------------------------
		explicit LightsDialog(QWidget *parent = 0);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Destructor
		//----------------------------------------------------------------------------------------------------------------------
		~LightsDialog();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Get function for the UI
		/// @return Reference to the UI in this class
		//----------------------------------------------------------------------------------------------------------------------
		const Ui::LightsDialog& getUI() {return *m_ui;}

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief The UI of this class
		//----------------------------------------------------------------------------------------------------------------------
		Ui::LightsDialog *m_ui;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Set the max number of lights
		/// This must be also defined in the shaders
		//----------------------------------------------------------------------------------------------------------------------
		static constexpr int NumLights = 4;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Container of light information
		//----------------------------------------------------------------------------------------------------------------------
		std::array<Light,NumLights> m_lights;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Store the currently selected light for faster computation
		//----------------------------------------------------------------------------------------------------------------------
		int m_currentIndex = 0;


	private slots:
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Change the UI values depending on the light
		/// @param _index The index for the array m_lights
		//----------------------------------------------------------------------------------------------------------------------
		void changeLightInfo(int _index);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Change the isActive status
		//----------------------------------------------------------------------------------------------------------------------
		void setActiveStatus();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Set the position
		//----------------------------------------------------------------------------------------------------------------------
		void setPos();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Set the ambient
		//----------------------------------------------------------------------------------------------------------------------
		void setAmbient();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Set the diffuse
		//----------------------------------------------------------------------------------------------------------------------
		void setDiffuse();
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Set the specular
		//----------------------------------------------------------------------------------------------------------------------
		void setSpecular();
};

#endif // LIGHTSDIALOG_H_
