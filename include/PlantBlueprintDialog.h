#ifndef PLANTBLUEPRINTDIALOG_H_
#define PLANTBLUEPRINTDIALOG_H_

#include <array>
#include <QDialog>
#include <QLabel>
#include <QLineEdit>
#include <QPalette>

//----------------------------------------------------------------------------------------------------------------------
/// @file PlantBlueprintDialog.h
/// @brief this class contains the user interface required to create a new Plant Blueprint object
/// @author Neerav Nagda
/// @version 1.0
/// @date 31/03/17
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// @struct Validation
/// @brief contains enum variables
/// @enum variables
/// @brief enumarated names for the validation array
//----------------------------------------------------------------------------------------------------------------------
struct Validation
{
		enum variables
		{
			BLUEPRINTNAME = 0,
			GRAMMARFILE = 1,
			SHADERNAME = 2,
			VERTEXSHADER = 3,
			FRAGMENTSHADER = 4,
			COUNT = 5
		};
};
typedef Validation::variables ValidationVariables;

		namespace Ui {
		class PlantBlueprintDialog;
		}

//----------------------------------------------------------------------------------------------------------------------
/// @class PlantBlueprintDialog
/// @brief this class manages the UI and UI functions
//----------------------------------------------------------------------------------------------------------------------
		class PlantBlueprintDialog : public QDialog
		{
				Q_OBJECT

			public slots:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief add or remove widgets to add a new shader
				//----------------------------------------------------------------------------------------------------------------------
				void updateShaderWidgets();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the blueprint already exists
				//----------------------------------------------------------------------------------------------------------------------
				void checkBlueprintExists();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the file exists
				/// Change text colour to red if the file does not exist, or green if the file exists
				//----------------------------------------------------------------------------------------------------------------------
				void checkGrammarFileExists();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief reset text colour to black
				//----------------------------------------------------------------------------------------------------------------------
				void resetGrammarFileTextColour();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the shader name already exists
				//----------------------------------------------------------------------------------------------------------------------
				void checkShaderNameExists();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the vertex shader file exists
				//----------------------------------------------------------------------------------------------------------------------
				void checkVertexShaderExists();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief reset text colour to black
				//----------------------------------------------------------------------------------------------------------------------
				void resetVertexShaderTextColour();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the fragment shader file exists
				//----------------------------------------------------------------------------------------------------------------------
				void checkFragmentShaderExists();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief reset text colour to black
				//----------------------------------------------------------------------------------------------------------------------
				void resetFragmentShaderTextColour();

			public:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief constructor
				//----------------------------------------------------------------------------------------------------------------------
				explicit PlantBlueprintDialog(QWidget *parent = 0);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief destructor
				//----------------------------------------------------------------------------------------------------------------------
				~PlantBlueprintDialog();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for the UI
				/// @return reference to the UI in this class
				//----------------------------------------------------------------------------------------------------------------------
				const Ui::PlantBlueprintDialog& getUI() {return *m_ui;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief update the shaders in the UI combobox m_shaderSelect
				//----------------------------------------------------------------------------------------------------------------------
				void updateShaders();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief create a new instance of the Plant Blueprint
				/// @return status if a new Plant Blueprint was created
				//----------------------------------------------------------------------------------------------------------------------
				bool createPlantBlueprint();

			private:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief ui for this class
				//----------------------------------------------------------------------------------------------------------------------
				Ui::PlantBlueprintDialog *m_ui;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief widget to store label text
				//----------------------------------------------------------------------------------------------------------------------
				QLabel *m_shaderPathsLabel;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief widget for the shader name
				//----------------------------------------------------------------------------------------------------------------------
				QLineEdit *m_shaderNameWidget;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief widget for vertex shader path
				//----------------------------------------------------------------------------------------------------------------------
				QLineEdit *m_vertexShaderPathWidget;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief widget for fragment shader path
				//----------------------------------------------------------------------------------------------------------------------
				QLineEdit *m_fragmentShaderPathWidget;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if new widgets are active or not
				//----------------------------------------------------------------------------------------------------------------------
				bool m_isNewShaderWidgets = false;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief default palette to reset to
				//----------------------------------------------------------------------------------------------------------------------
				QPalette c_defaultPalette;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief check if the ui element values are valid
				/// All of the values must be set to true to create a new blueprint
				//----------------------------------------------------------------------------------------------------------------------
				std::array<bool, ValidationVariables::COUNT> m_validationChecks;

				//----------------------------------------------------------------------------------------------------------------------
				/// @brief add widgets to the ui for adding a new shader
				//----------------------------------------------------------------------------------------------------------------------
				void addNewShaderWidgets();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief remove widgets from the ui
				//----------------------------------------------------------------------------------------------------------------------
				void removeNewShaderWidgets();
		};

#endif // PLANTBLUEPRINTDIALOG_H_
