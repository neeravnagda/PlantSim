#ifndef PLANTBLUEPRINT_H_
#define PLANTBLUEPRINT_H_

#include <memory>
#include <string>
#include <vector>
#include <unordered_map>
#include <ngl/ShaderLib.h>
#include <ngl/Util.h>
#include "ProductionRule.h"
#include "RTreeTypes.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file PlantBlueprint.h
/// @brief this class contains data required for Plant objects
/// @author Neerav Nagda
/// @version 0.5
/// @date 21/03/17
//----------------------------------------------------------------------------------------------------------------------
/// @enum DecayType
/// @brief a type of decay
/// This is typically used to calculate shorter branches
//----------------------------------------------------------------------------------------------------------------------
enum class DecayType {NONE, LINEAR, EXPONENTIAL, CUSTOM};
//----------------------------------------------------------------------------------------------------------------------
/// @class PlantBlueprint
/// @brief this class manages the data for each plant type
//----------------------------------------------------------------------------------------------------------------------
class PlantBlueprint
{
		public:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief delete copy constructors
				//----------------------------------------------------------------------------------------------------------------------
				PlantBlueprint(const PlantBlueprint&) = delete;
				PlantBlueprint& operator=(const PlantBlueprint&) = delete;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get an instance of this class
				/// @param _instanceID the key of the instance to return
				/// If no such instance exists, a new one is created
				//----------------------------------------------------------------------------------------------------------------------
				static PlantBlueprint* instance(const std::string _instanceID);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief destroys an instance
				/// @param _instanceID the key of the instance to delete
				//----------------------------------------------------------------------------------------------------------------------
				static void destroy(const std::string _instanceID);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief destroys all instances
				/// This is used for cleanup
				//----------------------------------------------------------------------------------------------------------------------
				static void destroyAll();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief initialise the geometry used to draw all plants
				//----------------------------------------------------------------------------------------------------------------------
				static void initGeometry();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief create a new shader program with a given name
				/// @param _name the name of the shader program to create
				/// This is effectively a set function
				//----------------------------------------------------------------------------------------------------------------------
				void createShaderProgram(const std::string _name);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief load in a shader file
				/// @param _filePath the file to load in
				/// @param _type the type of shader to make
				/// This attaches, loads and compiles the shader
				/// Therefore this should only be called once per shader type
				//----------------------------------------------------------------------------------------------------------------------
				void loadShader(const std::string _filePath, ngl::ShaderType _type);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief link the shader program
				/// note this must be called after all the shaders have been loaded in
				//----------------------------------------------------------------------------------------------------------------------
				void linkProgram();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief read the L-system grammar from a text file
				/// @param _filePath file path to text file
				//----------------------------------------------------------------------------------------------------------------------
				void readGrammarFromFile(const std::string _filePath);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_maxDepth
				/// @param _md new max depth
				//----------------------------------------------------------------------------------------------------------------------
				void setMaxDepth(int _md){m_maxDepth = _md;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_drawAngle
				/// @param _angle new angle to rotate
				//----------------------------------------------------------------------------------------------------------------------
				void setDrawAngle(float _angle){m_drawAngle = _angle;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_drawLength
				/// @param _length new default draw length
				//----------------------------------------------------------------------------------------------------------------------
				void setDrawLength(float _length){m_drawLength = _length;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_rootRadius
				/// @param _radius new initial radius
				//----------------------------------------------------------------------------------------------------------------------
				void setRootRadius(float _radius){m_rootRadius = _radius;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_decayConstant
				/// @param _decay new decay type
				/// @param _customDecayConstant user defined decay constant
				//----------------------------------------------------------------------------------------------------------------------
				void setDecay(DecayType _decay, float _customDecayConstant = 1.0f);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_axiom
				/// @return reference of the axiom for the L-system
				//----------------------------------------------------------------------------------------------------------------------
				const std::string& getAxiom(){return m_axiom;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_maxDepth
				/// @return reference of the max depth of the L-system
				//----------------------------------------------------------------------------------------------------------------------
				const unsigned& getMaxDepth(){return m_maxDepth;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_productionRules
				/// @return reference to the container of Production Rules
				//----------------------------------------------------------------------------------------------------------------------
				const std::vector<ProductionRule>& getProductionRules(){return m_productionRules;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_drawLength
				/// @return reference to the draw length
				//----------------------------------------------------------------------------------------------------------------------
				const float& getDrawLength(){return m_drawLength;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_drawAngle
				/// @return reference to the draw angle
				//----------------------------------------------------------------------------------------------------------------------
				const float& getDrawAngle(){return m_drawAngle;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_drawAngle
				/// @return the draw angle in radians
				//----------------------------------------------------------------------------------------------------------------------
				float getDrawAngleRadians() const {return ngl::radians(m_drawAngle);}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_rootRadius
				/// @return reference to the initial radius
				//----------------------------------------------------------------------------------------------------------------------
				const float& getRootRadius(){return m_rootRadius;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_decayConstant
				/// @return the decay constant
				//----------------------------------------------------------------------------------------------------------------------
				float getDecayConstant(){return m_decayConstant;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for the geometry name
				/// @return reference to a string representing the geometry
				/// this is a handle used for draw calls
				//----------------------------------------------------------------------------------------------------------------------
				const std::string& getGeometryName(){return s_geometryName;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for the shader program name
				/// @return reference to the name of the shader program
				/// this is a handle used for draw calls
				//----------------------------------------------------------------------------------------------------------------------
				const std::string& getShaderProgramName(){return m_shaderProgramName;}

		protected:
				PlantBlueprint(){}
				~PlantBlueprint(){}

		private:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief a container for the instances of this class
				//----------------------------------------------------------------------------------------------------------------------
				static std::unordered_map<std::string, PlantBlueprint*> s_instances;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief handle for the geometry
				//----------------------------------------------------------------------------------------------------------------------
				static std::string s_geometryName;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief spatial visualisation of the environment
				//----------------------------------------------------------------------------------------------------------------------
				static rTree_t s_rTree;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief handle for the shader name
				//----------------------------------------------------------------------------------------------------------------------
				std::string m_shaderProgramName;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief L-system axiom
				//----------------------------------------------------------------------------------------------------------------------
				std::string m_axiom;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief container for L-sytem production rules
				//----------------------------------------------------------------------------------------------------------------------
				std::vector<ProductionRule> m_productionRules;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the max number of iterations for the L-system string expansion
				//----------------------------------------------------------------------------------------------------------------------
				unsigned m_maxDepth;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the angle to rotate when drawing
				//----------------------------------------------------------------------------------------------------------------------
				float m_drawAngle;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the length of one forward draw command
				//----------------------------------------------------------------------------------------------------------------------
				float m_drawLength;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the initial radius
				//----------------------------------------------------------------------------------------------------------------------
				float m_rootRadius;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the decay constant
				//----------------------------------------------------------------------------------------------------------------------
				float m_decayConstant = 1.0f;

};

#endif // PLANTBLUEPRINT_H_
