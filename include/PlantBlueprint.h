#ifndef PLANTBLUEPRINT_H_
#define PLANTBLUEPRINT_H_

#include <map>
#include <memory>
#include <string>
#include <vector>
#include "ProductionRule.h"
#include "RTreeTypes.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file PlantBlueprint.h
/// @brief this class contains data required for Plant objects
/// @author Neerav Nagda
/// @version 0.5
/// @date 21/03/17
/// @class PlantBlueprint
/// @brief this class manages the data for each plant type
//----------------------------------------------------------------------------------------------------------------------


class PlantBlueprint
{
		public:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief delete copy constructors
				//----------------------------------------------------------------------------------------------------------------------
				PlantBlueprint(const PlantBlueprint&) = delete;
				PlantBlueprint& operator=(const PlantBlueprint&) = delete;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get an instance of this class
				/// @param _instanceID the key of the instance to return
				/// If no such instance exists, a new one is created
				//----------------------------------------------------------------------------------------------------------------------
				static PlantBlueprint* instance(const std::string _instanceID);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief destroys an instance
				/// @param _instanceID the key of the instance to delete
				//----------------------------------------------------------------------------------------------------------------------
				static void destroy(const std::string _instanceID);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief destroys all instances
				/// This is used for cleanup
				//----------------------------------------------------------------------------------------------------------------------
				static void destroyAll();
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief read the L-system grammar from a text file
				/// @param _filePath file path to text file
				//----------------------------------------------------------------------------------------------------------------------
				void readGrammarFromFile(const std::string _filePath);
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_maxDepth
				/// @param _md new max depth
				//----------------------------------------------------------------------------------------------------------------------
				void setMaxDepth(int _md){m_maxDepth = _md;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_drawAngle
				/// @param _angle new angle to rotate
				//----------------------------------------------------------------------------------------------------------------------
				void setDrawAngle(float _angle){m_drawAngle = _angle;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief set function for m_drawLength
				/// @param _length new default draw length
				//----------------------------------------------------------------------------------------------------------------------
				void setDrawLength(float _length){m_drawLength = _length;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_axiom
				/// @return reference of the axiom for the L-system
				//----------------------------------------------------------------------------------------------------------------------
				std::string* getAxiom(){return &m_axiom;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_maxDepth
				/// @return reference of the max depth of the L-system
				//----------------------------------------------------------------------------------------------------------------------
				unsigned* getMaxDepth(){return &m_maxDepth;}
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief get function for m_productionRules
				/// @return reference to the container of Production Rules
				//----------------------------------------------------------------------------------------------------------------------
				std::vector<ProductionRule>* getProductionRules(){return &m_productionRules;}

		protected:
				PlantBlueprint();
				~PlantBlueprint();

		private:
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief a container for the instances of this class
				//----------------------------------------------------------------------------------------------------------------------
				static std::map<std::string, PlantBlueprint*> s_instances;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief spatial visualisation of the environment
				//----------------------------------------------------------------------------------------------------------------------
				static rTree_t s_rTree;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief L-system axiom
				//----------------------------------------------------------------------------------------------------------------------
				std::string m_axiom;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief container for L-sytem production rules
				//----------------------------------------------------------------------------------------------------------------------
				std::vector<ProductionRule> m_productionRules;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the max number of iterations for the L-system string expansion
				//----------------------------------------------------------------------------------------------------------------------
				unsigned m_maxDepth;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the angle to rotate when drawing
				//----------------------------------------------------------------------------------------------------------------------
				float m_drawAngle;
				//----------------------------------------------------------------------------------------------------------------------
				/// @brief the length of one forward draw command
				//----------------------------------------------------------------------------------------------------------------------
				float m_drawLength;
};

#endif // PLANTBLUEPRINT_H_
